//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\avits\Documents\Visual Studio 2017\Projects\Samples.Antlr4\Samples.Antlr4\\Grammars\InvertedPolishCalculator.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class InvertedPolishCalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NUMBER=1, FIRST_NUMBER=2, SECOND_NUMBER=3, OPERATOR=4, PLUS=5, MINUS=6;
	public const int
		RULE_input = 0, RULE_addOrMinus = 1, RULE_expression = 2, RULE_number = 3;
	public static readonly string[] ruleNames = {
		"input", "addOrMinus", "expression", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "FIRST_NUMBER", "SECOND_NUMBER", "OPERATOR", "PLUS", "MINUS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "InvertedPolishCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static InvertedPolishCalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public InvertedPolishCalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public InvertedPolishCalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class InputContext : ParserRuleContext {
		public AddOrMinusContext addOrMinus() {
			return GetRuleContext<AddOrMinusContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IInvertedPolishCalculatorListener typedListener = listener as IInvertedPolishCalculatorListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IInvertedPolishCalculatorListener typedListener = listener as IInvertedPolishCalculatorListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IInvertedPolishCalculatorVisitor<TResult> typedVisitor = visitor as IInvertedPolishCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; addOrMinus();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOrMinusContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OPERATOR() { return GetToken(InvertedPolishCalculatorParser.OPERATOR, 0); }
		public AddOrMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOrMinus; } }
		public override void EnterRule(IParseTreeListener listener) {
			IInvertedPolishCalculatorListener typedListener = listener as IInvertedPolishCalculatorListener;
			if (typedListener != null) typedListener.EnterAddOrMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IInvertedPolishCalculatorListener typedListener = listener as IInvertedPolishCalculatorListener;
			if (typedListener != null) typedListener.ExitAddOrMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IInvertedPolishCalculatorVisitor<TResult> typedVisitor = visitor as IInvertedPolishCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOrMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOrMinusContext addOrMinus() {
		AddOrMinusContext _localctx = new AddOrMinusContext(Context, State);
		EnterRule(_localctx, 2, RULE_addOrMinus);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; number();
			State = 11; expression();
			State = 12; Match(OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AddOrMinusContext addOrMinus() {
			return GetRuleContext<AddOrMinusContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IInvertedPolishCalculatorListener typedListener = listener as IInvertedPolishCalculatorListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IInvertedPolishCalculatorListener typedListener = listener as IInvertedPolishCalculatorListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IInvertedPolishCalculatorVisitor<TResult> typedVisitor = visitor as IInvertedPolishCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 16;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14; addOrMinus();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 15; number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(InvertedPolishCalculatorParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IInvertedPolishCalculatorListener typedListener = listener as IInvertedPolishCalculatorListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IInvertedPolishCalculatorListener typedListener = listener as IInvertedPolishCalculatorListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IInvertedPolishCalculatorVisitor<TResult> typedVisitor = visitor as IInvertedPolishCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 6, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\b', '\x17', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x13', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x2', '\x2', '\x6', '\x2', 
		'\x4', '\x6', '\b', '\x2', '\x2', '\x2', '\x13', '\x2', '\n', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\f', '\x3', '\x2', '\x2', '\x2', '\x6', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\v', '\x5', '\x4', '\x3', '\x2', '\v', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\r', '\x5', '\b', '\x5', '\x2', '\r', '\xE', '\x5', '\x6', 
		'\x4', '\x2', '\xE', '\xF', '\a', '\x6', '\x2', '\x2', '\xF', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x13', '\x5', '\x4', '\x3', '\x2', '\x11', 
		'\x13', '\x5', '\b', '\x5', '\x2', '\x12', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x11', '\x3', '\x2', '\x2', '\x2', '\x13', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x15', '\a', '\x3', '\x2', '\x2', '\x15', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x3', '\x12',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
